#pragma once
#include "type.h"

struct random_series {
  u32 randomNumberIndex;
};

struct random_series
RandomSeed(u32 value);

// [0, U32_MAX]
u32
RandomNumber(struct random_series *series);

// [0, choiceCount)
u32
RandomChoice(struct random_series *series, u32 choiceCount);

// [0, 1]
f32
RandomNormal(struct random_series *series);

// [-1, 1]
f32
RandomUnit(struct random_series *series);

// [min, max]
f32
RandomBetween(struct random_series *series, f32 min, f32 max);

// [min, max]
s32
RandomBetweenS32(struct random_series *series, s32 min, s32 max);

#include "assert.h"
#include "math.h"

comptime u32 RandomNumberTable[] = {
  $$RANDOM_NUMBER_TABLE$$
};

internalfn struct random_series
RandomSeed(u32 value)
{
  struct random_series series;

  series.randomNumberIndex = value % $$RANDOM_NUMBER_COUNT$$;

  return series;
}

internalfn inline u32
RandomNumberMin(void)
{
  return $$RANDOM_NUMBER_MIN$$;
}

internalfn inline u32
RandomNumberMax(void)
{
  return $$RANDOM_NUMBER_MAX$$;
}

// [0, U32_MAX]
u32
RandomNumber(struct random_series *series)
{
  if (series->randomNumberIndex == $$RANDOM_NUMBER_COUNT$$)
    series->randomNumberIndex = 0;
  u32 value = RandomNumberTable[series->randomNumberIndex];
  series->randomNumberIndex++;
  return value;
}

// [0, choiceCount)
u32
RandomChoice(struct random_series *series, u32 choiceCount)
{
  u32 value = RandomNumber(series) % choiceCount;
  return value;
}

// [0, 1]
f32
RandomNormal(struct random_series *series)
{
  f32 divisor = 1.0f / (f32)RandomNumberMax();
  f32 value = (f32)RandomNumber(series) * divisor;
  debug_assert(value >= -1.0f && value <= 1.0f);
  return value;
}

// [-1, 1]
f32
RandomUnit(struct random_series *series)
{
  f32 value = 2 * RandomNormal(series) - 1;
  debug_assert(value >= -1.0f && value <= 1.0f);
  return value;
}

// [min, max]
f32
RandomBetween(struct random_series *series, f32 min, f32 max)
{
  debug_assert(min < max);
  f32 value = Lerp(min, max, RandomNormal(series));
  debug_assert(value >= min && value <= max);
  return value;
}

// [min, max]
s32
RandomBetweenS32(struct random_series *series, s32 min, s32 max)
{
  debug_assert(min < max);
  u32 range = (u32)(max + 1 - min);
  s32 value = min + (s32)(RandomNumber(series) % range);
  debug_assert(value >= min && value <= max);
  return value;
}
